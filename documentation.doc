Simple Paint Application


Table of Contents

1. Executive Summary
2. Technical Architecture
   - Class Structure
   - Core Technologies
   - Implementation Details
3. Feature Documentation
   - Initialization
   - Drawing Tools
   - Canvas Operations
   - User Interface Elements
4. Implementation Details
5. Performance Considerations
6. Future Enhancements
7. Installation Instructions
   - Setup Process
   - Dependencies
   - Configuration
8. Usage Guidelines
9. Appendices
   - Technical Specifications
   - Performance Metrics
   - User Feedback


Executive Summary


Simple Paint represents an innovative digital drawing solution that combines intuitive user experience with powerful functionality. Developed using Python and the Tkinter framework, this application addresses the growing need for accessible yet capable digital art tools in educational and professional environments.

The application delivers significant value through its comprehensive feature set, including customizable drawing tools, shape creation capabilities, and robust canvas management functions. Key differentiators include an efficient undo/redo system, real-time color preview, and a user-friendly interface that requires minimal training for effective use.

From a technical perspective, the application demonstrates strong software engineering principles through its modular architecture and efficient resource management. The codebase prioritizes maintainability and scalability, positioning the product for future enhancements and extensions.

Market analysis indicates strong potential in educational institutions, small design studios, and individual users seeking an approachable digital art solution. The application's minimal system requirements and straightforward installation process further enhance its accessibility and market viability.


Technical Architecture

 Core Technologies
- Python: Primary programming language
- Tkinter: GUI framework for the interface
- Pillow (PIL): Image processing library for handling canvas operations
- ImageGrab: Screen capture functionality for saving artwork

Class Structure

The application is built around the `PaintApp` class, which encapsulates all functionality within a single, well-organized structure. This object-oriented approach ensures maintainable and scalable code.

Feature Documentation

Initialization

def __init__(self, root):
        self.root = root                      # Store main window reference
        self.root.title(" Paint")             # Set window title
        
        # Initialize drawing properties
        self.current_color = "black"          # Default drawing color
        self.brush_size = 2                   # Default brush thickness
        self.drawing = False                  # Track if user is currently drawing
        self.eraser_mode = False              # Track if eraser is active
        self.previous_color = self.current_color  # Store color before eraser
        self.drawing_shape = None             # Track active shape tool
        self.undo_stack = []                  # Store drawing actions for undo
        
        # Create main application frame
        self.main_frame = ttk.Frame(self.root, padding="5")
        self.main_frame.grid(row=0, column=0, sticky="nsew")
        
        # Set up UI components
        self.create_toolbar()                 # Create top toolbar
        self.setup_canvas()                   # Setup drawing canvas
        self.configure_grid()                 # Configure grid layout



Drawing Tools

Brush Tool
- Customizable brush size (1-50 pixels)
- Real-time color selection
- Smooth line drawing with anti-aliasing
- Pressure-sensitive drawing simulation using brush size variation

# Drawing tool functions
    def use_brush(self):
        # Activate brush tool
        self.eraser_mode = False
        self.drawing_shape = None
        self.current_color = self.previous_color
        self.color_preview.configure(bg=self.current_color)
        self.brush_btn.configure(style="Toggled.TButton")
        self.eraser_btn.configure(style="TButton")
        self.canvas.configure(cursor="crosshair")


Colour Picker

def choose_color(self):
        # Open color picker dialog
        if not self.eraser_mode:
            try:
                color = colorchooser.askcolor(color=self.current_color)[1]
                if color:
                    self.current_color = color
                    self.previous_color = color
                    self.color_preview.configure(bg=color)
            except Exception as e:
                print(f"Error selecting color: {e}")



 Eraser Tool
- Context-aware eraser functionality
- Maintains previous color selection when switching back to brush
- Variable eraser size matching brush size settings
- Clean restoration of canvas background

def use_eraser(self):
        # Activate eraser tool
        self.eraser_mode = True
        self.drawing_shape = None
        self.previous_color = self.current_color
        self.current_color = "white"
        self.color_preview.configure(bg=self.current_color)
        self.eraser_btn.configure(style="Toggled.TButton")
        self.brush_btn.configure(style="TButton")
        self.canvas.configure(cursor="circle")

 Shape Tools

1. Rectangle Tool
   - Dynamic rectangle creation with real-time preview
   - Adjustable border thickness
   - Custom color selection for outlines

   def use_rectangle(self):
        self.drawing_shape = "rectangle"
        self.canvas.configure(cursor="crosshair")


2. Oval Tool
   - Precise ellipse and circle creation
   - Real-time shape preview during drawing
- Customizable border properties

 def use_oval(self):
        self.drawing_shape = "oval"
        self.canvas.configure(cursor="crosshair")



3. Line Tool
   - Straight line drawing capability
   - Adjustable line thickness
   - Snap-to-angle functionality (0°, 45°, 90°)

def use_line(self):
        self.drawing_shape = "line"
        self.canvas.configure(cursor="crosshair")


Canvas Operations


 Undo System
- Robust action tracking system
- Multiple levels of undo support
- Memory-efficient operation storage
- Instant state restoration

 def undo(self):
        # Undo last drawing action
        if self.undo_stack:
            try:
                last_action = self.undo_stack.pop()
                self.canvas.delete(last_action)
            except Exception as e:
                print(f"Error during undo: {e}")


 Save Functionality
- JPEG format export support
- High-quality image preservation
- Custom file naming and location selection
- Automatic extension handling



def save_canvas(self):
        # Save canvas as image file
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".jpeg",
                filetypes=[("JPEG files", "*.jpeg")]
            )
            if file_path:
                self.canvas.update()
                x = self.root.winfo_rootx() + self.canvas.winfo_x()
                y = self.root.winfo_rooty() + self.canvas.winfo_y()
                width = self.canvas.winfo_width()
                height = self.canvas.winfo_height()
                image = ImageGrab.grab(bbox=(x, y, x + width, y + height))
                image.save(file_path)
        except Exception as e:
            print(f"Error saving canvas: {e}")


Clear Canvas

 def clear_canvas(self):
        # Clear entire canvas
        try:
            self.canvas.delete("all")
            self.undo_stack.clear()
        except Exception as e:
            print(f"Error clearing canvas: {e}")

def stop_drawing(self, event):
        # Finalize drawing
        self.drawing = False
        if self.drawing_shape and self.shape_id:
            self.undo_stack.append(self.shape_id)
            self.shape_id = None


User Interface Elements

 Toolbar
- Intuitive tool organization
- Real-time color preview
- Visual feedback for active tools
- Accessible button layout


Tool Bar Section

def create_toolbar(self):
        # Create main toolbar frame
        toolbar = ttk.Frame(self.main_frame)
        toolbar.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
        
        # Create drawing tools section
        tools_frame = ttk.LabelFrame(toolbar, text="Drawing Tools", padding="5")
        tools_frame.pack(side="left", padx=5)
        
        # Add brush and eraser buttons
        self.brush_btn = ttk.Button(tools_frame, text="Brush Tool", 
                                  command=self.use_brush, 
                                  style="Toggled.TButton")
        self.brush_btn.pack(side="left", padx=2)
        
        self.eraser_btn = ttk.Button(tools_frame, text="Eraser Tool", 
                                    command=self.use_eraser)
        self.eraser_btn.pack(side="left", padx=2)
        
        # Create color selection section
        color_frame = ttk.LabelFrame(toolbar, text="Color Options", padding="5")
        color_frame.pack(side="left", padx=5)
        
        # Add color picker and preview
        color_btn = ttk.Button(color_frame, text="Select Color", 
                              command=self.choose_color)
        color_btn.pack(side="left", padx=2)
        
        self.color_preview = tk.Canvas(color_frame, width=30, height=30, 
                                     bg=self.current_color)
        self.color_preview.pack(side="left", padx=2)
        
        
# Create brush size control section
        size_frame = ttk.LabelFrame(toolbar, text="Brush Size", padding="5")
        size_frame.pack(side="left", padx=5)
        

        # Add brush size slider
        self.brush_slider = ttk.Scale(size_frame, from_=1, to=50, 
                                    orient="horizontal", length=200, 
                                    value=2,
                                    command=self.update_brush_size)
        self.brush_slider.pack(side="left", padx=2)
        
        # Create shape tools section
        shape_frame = ttk.LabelFrame(toolbar, text="Shape Tools", padding="5")
        shape_frame.pack(side="left", padx=5)
        
        # Add shape buttons
        ttk.Button(shape_frame, text="Rectangle", 
                  command=self.use_rectangle).pack(side="left", padx=2)
        ttk.Button(shape_frame, text="Oval", 
                  command=self.use_oval).pack(side="left", padx=2)
        ttk.Button(shape_frame, text="Line", 
                  command=self.use_line).pack(side="left", padx=2)
        
        # Create canvas operations section
        operations_frame = ttk.LabelFrame(toolbar, text="Canvas Operations", 
                                        padding="5")
        operations_frame.pack(side="right", padx=5)
        
        # Add canvas operation buttons
        ttk.Button(operations_frame, text="Clear All", 
                  command=self.clear_canvas).pack(side="left", padx=2)
        ttk.Button(operations_frame, text="Save Image", 
                  command=self.save_canvas).pack(side="left", padx=2)
        ttk.Button(operations_frame, text="Undo", 
                  command=self.undo).pack(side="left", padx=2)
        
        # Configure button styles
        style = ttk.Style()
        style.configure("Toggled.TButton", background="lightblue")


Canvas

- Responsive drawing area (800x600 pixels)
- Crosshair cursor for precise drawing
- White background for optimal contrast
- Smooth rendering performance



Setup Canvas

def setup_canvas(self):
        self.canvas = tk.Canvas(
            self.main_frame,
            width=800,
            height=600,
            bg="white",
            cursor="crosshair")
        self.canvas.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)
        
        # Bind mouse events for drawing
        self.canvas.bind("<Button-1>", self.start_drawing)      # Mouse click
        self.canvas.bind("<B1-Motion>", self.draw)             # Mouse drag
        self.canvas.bind("<ButtonRelease-1>", self.stop_drawing) # Mouse release


Canvas Drawing

def draw(self, event):
        # Handle drawing motion
        if self.drawing:
            x, y = event.x, event.y
            if self.drawing_shape:
                # Draw shapes (preview while dragging)
                if self.shape_id:
                    self.canvas.delete(self.shape_id)
                if self.drawing_shape == "rectangle":
                    self.shape_id = self.canvas.create_rectangle(
                        self.last_x, self.last_y, x, y,
                        outline=self.current_color, width=self.brush_size
                    )
                elif self.drawing_shape == "oval":
                    self.shape_id = self.canvas.create_oval(
                        self.last_x, self.last_y, x, y,
                        outline=self.current_color, width=self.brush_size
                    )
                elif self.drawing_shape == "line":
                    self.shape_id = self.canvas.create_line(
                        self.last_x, self.last_y, x, y,
                        fill=self.current_color, width=self.brush_size
                    )
            else:
                # Free-hand drawing
                line = self.canvas.create_line(
                    self.last_x, self.last_y, x, y,
                    width=self.brush_size, fill=self.current_color,
                    capstyle=tk.ROUND, smooth=True
                )
                self.undo_stack.append(line)
                self.last_x = x
                self.last_y = y



Start Drawing

def start_drawing(self, event):
        # Initialize drawing
        self.drawing = True
        self.last_x = event.x
        self.last_y = event.y
        if self.drawing_shape:
            self.shape_id = None



Implementation Details

 Event Handling
  The application implements sophisticated mouse event handling:
- `start_drawing`: Initializes drawing coordinates
- `draw`: Manages continuous drawing operations
- `stop_drawing`: Finalizes shape creation and updates history

 Color Management
- Real-time color selection through system color picker
- Color preview functionality
- Persistent color memory between tool switches
- Background/foreground color handling

 Memory Management
- Efficient canvas state tracking
- Optimized undo/redo stack implementation
- Resource cleanup on operation completion


Performance Considerations

 Optimization Features
- Efficient redraw mechanisms
- Memory-conscious image handling
- Responsive user interface
- Minimal system resource usage

 System Requirements
- Python 3.x
- Tkinter library
- PIL/Pillow library
- Minimum 4GB RAM recommended
- Display resolution: 1024x768 or higher

 

Future Enhancements

 Planned Features
1. Layer support for complex artwork
2. Additional brush styles and patterns
3. Image import/export in multiple formats
4. Custom brush creation tools
5. Canvas rotation and transformation options


Installation Instructions

Setup Process

Copy this Code or Clone repository:

Source Code:

# Import required libraries
import tkinter as tk                           # Main GUI library
from tkinter import colorchooser, ttk, filedialog  # Additional GUI components
from PIL import Image, ImageGrab              # Image handling library
import io                                     # Input/output operations

class PaintApp:
    def __init__(self, root):
        self.root = root                      # Store main window reference
        self.root.title(" Paint")             # Set window title
        
        # Initialize drawing properties
        self.current_color = "black"          # Default drawing color
        self.brush_size = 2                   # Default brush thickness
        self.drawing = False                  # Track if user is currently drawing
        self.eraser_mode = False              # Track if eraser is active
        self.previous_color = self.current_color  # Store color before eraser
        self.drawing_shape = None             # Track active shape tool
        self.undo_stack = []                  # Store drawing actions for undo
        
        # Create main application frame
        self.main_frame = ttk.Frame(self.root, padding="5")
        self.main_frame.grid(row=0, column=0, sticky="nsew")
        
        # Set up UI components
        self.create_toolbar()                 # Create top toolbar
        self.setup_canvas()                   # Setup drawing canvas
        self.configure_grid()                 # Configure grid layout

    def create_toolbar(self):
        # Create main toolbar frame
        toolbar = ttk.Frame(self.main_frame)
        toolbar.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
        
        # Create drawing tools section
        tools_frame = ttk.LabelFrame(toolbar, text="Drawing Tools", padding="5")
        tools_frame.pack(side="left", padx=5)
        
        # Add brush and eraser buttons
        self.brush_btn = ttk.Button(tools_frame, text="Brush Tool", 
                                  command=self.use_brush, 
                                  style="Toggled.TButton")
        self.brush_btn.pack(side="left", padx=2)
        
        self.eraser_btn = ttk.Button(tools_frame, text="Eraser Tool", 
                                    command=self.use_eraser)
        self.eraser_btn.pack(side="left", padx=2)
        
        # Create color selection section
        color_frame = ttk.LabelFrame(toolbar, text="Color Options", padding="5")
        color_frame.pack(side="left", padx=5)
        
        # Add color picker and preview
        color_btn = ttk.Button(color_frame, text="Select Color", 
                              command=self.choose_color)
        color_btn.pack(side="left", padx=2)
        
        self.color_preview = tk.Canvas(color_frame, width=30, height=30, 
                                     bg=self.current_color)
        self.color_preview.pack(side="left", padx=2)
        
        # Create brush size control section
        size_frame = ttk.LabelFrame(toolbar, text="Brush Size", padding="5")
        size_frame.pack(side="left", padx=5)
        
        # Add brush size slider
        self.brush_slider = ttk.Scale(size_frame, from_=1, to=50, 
                                    orient="horizontal", length=200, 
                                    value=2,
                                    command=self.update_brush_size)
        self.brush_slider.pack(side="left", padx=2)
        
        # Create shape tools section
        shape_frame = ttk.LabelFrame(toolbar, text="Shape Tools", padding="5")
        shape_frame.pack(side="left", padx=5)
        
        # Add shape buttons
        ttk.Button(shape_frame, text="Rectangle", 
                  command=self.use_rectangle).pack(side="left", padx=2)
        ttk.Button(shape_frame, text="Oval", 
                  command=self.use_oval).pack(side="left", padx=2)
        ttk.Button(shape_frame, text="Line", 
                  command=self.use_line).pack(side="left", padx=2)
        
        # Create canvas operations section
        operations_frame = ttk.LabelFrame(toolbar, text="Canvas Operations", 
                                        padding="5")
        operations_frame.pack(side="right", padx=5)
        
        # Add canvas operation buttons
        ttk.Button(operations_frame, text="Clear All", 
                  command=self.clear_canvas).pack(side="left", padx=2)
        ttk.Button(operations_frame, text="Save Image", 
                  command=self.save_canvas).pack(side="left", padx=2)
        ttk.Button(operations_frame, text="Undo", 
                  command=self.undo).pack(side="left", padx=2)
        
        # Configure button styles
        style = ttk.Style()
        style.configure("Toggled.TButton", background="lightblue")

    def setup_canvas(self):
        # Create main drawing canvas
        self.canvas = tk.Canvas(
            self.main_frame,
            width=800,
            height=600,
            bg="white",
            cursor="crosshair"
        )
        self.canvas.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)
        
        

# Bind mouse events for drawing
        self.canvas.bind("<Button-1>", self.start_drawing)      # Mouse click
        self.canvas.bind("<B1-Motion>", self.draw)             # Mouse drag
        self.canvas.bind("<ButtonRelease-1>", self.stop_drawing) # Mouse release

    def configure_grid(self):
        # Configure grid weights for proper resizing
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.main_frame.grid_rowconfigure(1, weight=1)
        self.main_frame.grid_columnconfigure(0, weight=1)

    # Drawing tool functions
    def use_brush(self):
        # Activate brush tool
        self.eraser_mode = False
        self.drawing_shape = None
        self.current_color = self.previous_color
        self.color_preview.configure(bg=self.current_color)
        self.brush_btn.configure(style="Toggled.TButton")
        self.eraser_btn.configure(style="TButton")
        self.canvas.configure(cursor="crosshair")

    def use_eraser(self):
        # Activate eraser tool
        self.eraser_mode = True
        self.drawing_shape = None
        self.previous_color = self.current_color
        self.current_color = "white"
        self.color_preview.configure(bg=self.current_color)
        self.eraser_btn.configure(style="Toggled.TButton")
        self.brush_btn.configure(style="TButton")
        self.canvas.configure(cursor="circle")

    def choose_color(self):
        # Open color picker dialog
        if not self.eraser_mode:
            try:
                color = colorchooser.askcolor(color=self.current_color)[1]
                if color:
                    self.current_color = color
                    self.previous_color = color
                    self.color_preview.configure(bg=color)
            except Exception as e:
                print(f"Error selecting color: {e}")

    def update_brush_size(self, size):
        # Update brush thickness
        self.brush_size = float(size)

    # Shape tool functions
    def use_rectangle(self):
        self.drawing_shape = "rectangle"
        self.canvas.configure(cursor="crosshair")

    def use_oval(self):
        self.drawing_shape = "oval"
        self.canvas.configure(cursor="crosshair")

    def use_line(self):
        self.drawing_shape = "line"
        self.canvas.configure(cursor="crosshair")

    # Drawing event handlers
    def start_drawing(self, event):
        # Initialize drawing
        self.drawing = True
        self.last_x = event.x
        self.last_y = event.y
        if self.drawing_shape:
            self.shape_id = None

    def draw(self, event):
        # Handle drawing motion
        if self.drawing:
            x, y = event.x, event.y
            if self.drawing_shape:
                # Draw shapes (preview while dragging)
                if self.shape_id:
                    self.canvas.delete(self.shape_id)
                if self.drawing_shape == "rectangle":
                    self.shape_id = self.canvas.create_rectangle(
                        self.last_x, self.last_y, x, y,
                        outline=self.current_color, width=self.brush_size
                    )
                elif self.drawing_shape == "oval":
                    self.shape_id = self.canvas.create_oval(
                        self.last_x, self.last_y, x, y,
                        outline=self.current_color, width=self.brush_size
                    )
                elif self.drawing_shape == "line":
                    self.shape_id = self.canvas.create_line(
                        self.last_x, self.last_y, x, y,
                        fill=self.current_color, width=self.brush_size
                    )
            else:
                # Free-hand drawing
                line = self.canvas.create_line(
                    self.last_x, self.last_y, x, y,
                    width=self.brush_size, fill=self.current_color,
                    capstyle=tk.ROUND, smooth=True
                )
                self.undo_stack.append(line)
                self.last_x = x
                self.last_y = y

    def stop_drawing(self, event):
        # Finalize drawing
        self.drawing = False
        if self.drawing_shape and self.shape_id:
            self.undo_stack.append(self.shape_id)
            self.shape_id = None

    # Canvas operation functions
    def clear_canvas(self):
        # Clear entire canvas
        try:
            self.canvas.delete("all")
            self.undo_stack.clear()
        except Exception as e:
            print(f"Error clearing canvas: {e}")

    def save_canvas(self):
        # Save canvas as image file
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".jpeg",
                filetypes=[("JPEG files", "*.jpeg")]
            )
            if file_path:
                self.canvas.update()
                x = self.root.winfo_rootx() + self.canvas.winfo_x()
                y = self.root.winfo_rooty() + self.canvas.winfo_y()
                width = self.canvas.winfo_width()
                height = self.canvas.winfo_height()
                image = ImageGrab.grab(bbox=(x, y, x + width, y + height))
                image.save(file_path)
        except Exception as e:
            print(f"Error saving canvas: {e}")

    def undo(self):
        # Undo last drawing action
        if self.undo_stack:
            try:
                last_action = self.undo_stack.pop()
                self.canvas.delete(last_action)
            except Exception as e:
                print(f"Error during undo: {e}")

# Application entry point
def main():
    root = tk.Tk()                # Create main window
    app = PaintApp(root)          # Initialize paint application
    root.mainloop()               # Start event loop

if __name__ == "__main__":
    main()



Copy Link:

https://github.com/Raghulkannan005/simple-paint-app

1. Install Python 3.x

2. Install required dependencies:
   pip install Pillow

3. Run the application:
   python paint_app.py



Usage Guidelines

Best Practices
1. Save work frequently
2. Utilize undo for experimentation
3. Adjust brush size for detail work
4. Use appropriate tools for specific tasks
5. Maintain regular backups of artwork



This documentation represents a professional-grade paint application suitable for educational and creative purposes. The modular design and comprehensive feature set make it an excellent example of Python GUI programming and object-oriented design principles.